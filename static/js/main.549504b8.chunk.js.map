{"version":3,"sources":["hocs/MainAppHOC.tsx","reportWebVitals.ts","api/weather.api.ts","store/weather.reducer.ts","store/store.ts","assets/MorningRain.gif","assets/NightRain.gif","assets/Rain1.gif","assets/Fog.gif","assets/Fog1.gif","assets/Fog2.gif","utils/gifs.ts","assets/Snow.gif","assets/Snow2.gif","assets/Snow3.gif","assets/Cloudy.gif","assets/ClearSky.gif","components/SearchForm.tsx","store/weather.selectors.ts","components/main.tsx","index.tsx"],"names":["Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","apiKey","API","GetWeatherByCity","city","a","axios","get","GetWeatherByPos","lat","lon","initialState","weather","error","actions","type","msg","reducers","combineReducers","form","formReducer","state","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","GIFs","fog","Fog","Fog1","Fog2","rain","Rain","morningRain","nightRain","snow","mist","clouds","clear","Input","props","Form","Control","input","reduxForm","className","onSubmit","handleSubmit","Field","name","placeholder","component","Button","getWeather","getError","MainAppHOC","dispatch","useDispatch","useSelector","useState","initialized","setInitialized","bgGIF","setBgGif","useEffect","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","resp","data","cod","message","obj","degree","parseInt","Math","ceil","main","temp","toFixed","country","sys","err","console","log","SetBG","nameLC","toLowerCase","index","random","length","Image","src","fluid","draggable","alt","formData","cityName","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.549504b8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport store from \"../store/store\";\r\nimport {Provider} from \"react-redux\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nexport const MainAppHOC = (Component: React.FC) => (props: any) => {\r\n    return (\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <Component {...props}/>\r\n            </Provider>\r\n        </HashRouter>\r\n    )\r\n};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from \"axios\";\r\n\r\nconst apiKey: string = `0a494230a7296285ed456b380ec63553`;\r\n\r\nexport const API = {\r\n    GetWeatherByCity: async (city: string) => {\r\n        try {\r\n            return await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`);\r\n        } catch (e) {\r\n            return e;\r\n        }\r\n    },\r\n    GetWeatherByPos: async (lat: number, lon: number) => {\r\n        try {\r\n            return await axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}`);\r\n        } catch (e) {\r\n            return e;\r\n        }\r\n    }\r\n};","import {StateType, ActionType,  IWeather} from \"./weather.interfaces\";\r\nimport {API} from \"../api/weather.api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst initialState: StateType = {\r\n    weather: null,\r\n    error: null,\r\n};\r\ntype InitialState = typeof initialState;\r\n\r\nexport const weatherReducer = (state: StateType = initialState, action: ActionType): InitialState => {\r\n    switch (action.type) {\r\n        case \"SET_WEATHER\":\r\n            return {\r\n                ...state,\r\n                weather: {...action.weather}\r\n            };\r\n        case \"SET_ERROR\":\r\n            return {\r\n                ...initialState,\r\n                error: action.msg,\r\n            };\r\n        default:\r\n            return {\r\n                ...state,\r\n            }\r\n    }\r\n};\r\nexport const actions = {\r\n    setWeather: (weather: IWeather | null) => ({type: \"SET_WEATHER\", weather}),\r\n    setError: (msg: string | null) => ({type: \"SET_ERROR\", msg})\r\n};\r\n\r\nexport const SetWeather = (city: string) => async (dispatch: Dispatch<any>) => {\r\n    const resp = await API.GetWeatherByCity(city);\r\n    if (typeof resp !== \"string\" && resp.data) {\r\n        if (resp.data.cod !== 200) {\r\n            dispatch(actions.setError(resp.data.message));\r\n        } else {\r\n            const obj = {\r\n                city: resp.data.name,\r\n                degree: parseInt(Math.ceil(resp.data.main.temp - 273.15).toFixed(0)),\r\n                name: resp.data.weather[0].main,\r\n                country: resp.data.sys.country,\r\n            };\r\n            dispatch(actions.setWeather(obj));\r\n        }\r\n    } else {\r\n        dispatch(actions.setError(\"City not found\"));\r\n    }\r\n};\r\nexport const SetWeatherByPos = (lat: number, lon: number) => async (dispatch: Dispatch<any>) => {\r\n    const resp = await API.GetWeatherByPos(lat, lon);\r\n    if (typeof resp !== \"string\" && resp.data) {\r\n        if (resp.data.cod !== 200) {\r\n            dispatch(actions.setError(resp.data.message));\r\n        } else {\r\n            const obj = {\r\n                city: resp.data.name,\r\n                degree: parseInt(Math.ceil(resp.data.main.temp - 273.15).toFixed(0)),\r\n                name: resp.data.weather[0].main,\r\n                country: resp.data.sys.country,\r\n            };\r\n            dispatch(actions.setWeather(obj));\r\n        }\r\n    } else {\r\n        dispatch(actions.setError(\"Server error\"));\r\n    }\r\n};\r\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport {weatherReducer} from \"./weather.reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    form: formReducer,\r\n    weather: weatherReducer,\r\n});\r\n\r\ntype RootReducerType = typeof reducers;\r\nexport type AppStateType = ReturnType<RootReducerType>;\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\nexport default store;\r\n","export default __webpack_public_path__ + \"static/media/MorningRain.b36af12a.gif\";","export default __webpack_public_path__ + \"static/media/NightRain.31d7ca51.gif\";","export default __webpack_public_path__ + \"static/media/Rain1.f9ea0cd0.gif\";","export default __webpack_public_path__ + \"static/media/Fog.1c17f57d.gif\";","export default __webpack_public_path__ + \"static/media/Fog1.9664d045.gif\";","export default __webpack_public_path__ + \"static/media/Fog2.4858f1f2.gif\";","import morningRain from '../assets/MorningRain.gif';\r\nimport nightRain from '../assets/NightRain.gif';\r\nimport Rain from '../assets/Rain1.gif';\r\nimport Fog from '../assets/Fog.gif';\r\nimport Fog1 from '../assets/Fog1.gif';\r\nimport Fog2 from '../assets/Fog2.gif';\r\nimport Snow from '../assets/Snow.gif';\r\nimport Snow2 from '../assets/Snow2.gif';\r\nimport Snow3 from '../assets/Snow3.gif';\r\nimport Cloudy from '../assets/Cloudy.gif';\r\nimport ClearSky from '../assets/ClearSky.gif';\r\n\r\nconst fog: Array<any> = [Fog, Fog1, Fog2];\r\nconst mist: Array<any> = [Fog, Fog1, Fog2];\r\nconst rain: Array<any> = [Rain, morningRain, nightRain];\r\nconst snow: Array<any> = [Snow, Snow2, Snow3];\r\nconst clouds: Array<any> = [Cloudy];\r\nconst clear: Array<any> = [ClearSky];\r\n\r\nexport const GIFs = {\r\n    fog,\r\n    rain,\r\n    snow,\r\n    mist,\r\n    clouds,\r\n    clear\r\n};\r\n","export default __webpack_public_path__ + \"static/media/Snow.86f55958.gif\";","export default __webpack_public_path__ + \"static/media/Snow2.16abfe11.gif\";","export default __webpack_public_path__ + \"static/media/Snow3.99d4365e.gif\";","export default __webpack_public_path__ + \"static/media/Cloudy.cf326fcc.gif\";","export default __webpack_public_path__ + \"static/media/ClearSky.613bda1e.gif\";","import React, {FC} from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Form, Button} from \"react-bootstrap\";\r\n\r\nconst Input: FC = (props: any) => <Form.Control type={\"text\"} {...props} {...props.input} />;\r\n\r\nconst SearchForm: FC = (props: any) => <Form className={\"mt-3 d-flex\"} onSubmit={props.handleSubmit}>\r\n    <Field\r\n        name={\"cityName\"}\r\n        type={\"text\"}\r\n        placeholder={\"City Name\"}\r\n        component={Input}\r\n        className={\"text-primary\"}\r\n    />\r\n    <Button className={\"ml-1 \"} type={\"submit\"}>GO</Button>\r\n</Form>;\r\n\r\nexport default reduxForm({form: 'search'})(SearchForm);","import {AppStateType} from \"./store\";\r\n\r\nexport const getWeatherSelector = (state: AppStateType) => state.weather;\r\nexport const getWeather = (state: AppStateType) => state.weather.weather;\r\nexport const getError = (state: AppStateType) => state.weather.error;","import React, {useEffect, useState, FC} from \"react\";\r\nimport {MainAppHOC} from \"../hocs/MainAppHOC\";\r\nimport {GIFs} from '../utils/gifs';\r\nimport {Image} from \"react-bootstrap\";\r\nimport SearchForm from \"./SearchForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {SetWeather, SetWeatherByPos} from \"../store/weather.reducer\";\r\nimport {getError, getWeather} from \"../store/weather.selectors\";\r\n\r\nconst Main: FC = () => {\r\n    const dispatch = useDispatch();\r\n    const weather = useSelector(getWeather);\r\n    const error = useSelector(getError);\r\n    const [initialized, setInitialized] = useState(false);\r\n    const [bgGIF, setBgGif] = useState(\"\");\r\n    useEffect(() => {\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition((pos) => {\r\n                dispatch(SetWeatherByPos(pos.coords.latitude, pos.coords.longitude));\r\n            }, (err) => {\r\n                setInitialized(true);\r\n            });\r\n        } else {\r\n            setInitialized(true);\r\n            console.log(\"Your browser is not supported Geolocation\");\r\n        }\r\n        //eslint-disable-next-line\r\n    }, []);\r\n    useEffect(() => {\r\n        if (weather) {\r\n            SetBG(weather.name);\r\n            setInitialized(true);\r\n        }\r\n    }, [weather]);\r\n    const SetBG = (name: string) => {\r\n        const nameLC = name.toLowerCase();\r\n        //@ts-ignore\r\n        const index = parseInt((Math.random() * (GIFs[nameLC].length - 1)).toFixed(0));\r\n        //@ts-ignore\r\n        setBgGif(GIFs[nameLC][index]);\r\n    };\r\n    const SFSubmit = (formData: any) => {\r\n        if (!formData.cityName) return null;\r\n        dispatch(SetWeather(formData.cityName));\r\n    };\r\n\r\n    return !initialized\r\n        ? <div className={\"container d-flex justify-content-center align-items-center h-100\"}><h1>Loading...</h1></div>\r\n        : <>\r\n            <div className={'background w-100 h-100 d-flex justify-content-center'}>\r\n                {weather\r\n                    ? <Image src={bgGIF} fluid draggable={\"false\"} alt={\"image\"}/>\r\n                    : <div className={'loading bg-light'}/>\r\n                }\r\n            </div>\r\n            <div className={'container content d-flex flex-column justify-content-center align-items-center'}>\r\n                <h1 className={\"text-primary\"}>Quick Weather <i>Demo(ver 0.1)</i></h1>\r\n                <h3 className={\"text-primary\"}>Find out the weather of your city quickly</h3>\r\n                <SearchForm onSubmit={SFSubmit}/>\r\n                {weather\r\n                    ? <div className={\"city d-flex flex-column justify-content-center align-items-center mt-3\"}>\r\n                        <h1 className={\"text-primary\"}>{weather.city}/{weather.country}</h1>\r\n                        <h2 className={\"text-primary\"}>{weather.name}</h2>\r\n                        <h2 className={\"text-primary\"}>{weather.degree}&deg;C\r\n                            / {((weather.degree * 9 / 5) + 32).toFixed(0)}&deg;F</h2>\r\n                    </div>\r\n                    : error\r\n                        ? <h2 className={\"text-danger mt-3\"}>{error}</h2>\r\n                        : <h2 className={\"text-danger mt-3\"}>Enter city to find out the weather</h2>\r\n                }\r\n            </div>\r\n        </>\r\n};\r\n\r\nexport default MainAppHOC(Main);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\nimport Main from \"./components/main\";\nimport './index.sass';\n\nReactDOM.render(<Main/>, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}